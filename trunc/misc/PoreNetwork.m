%Changing the BC from LTR instead of DownToUp
%Final version of 2D Hexagonal system copied from the last working modified Diffusion-Advection file.
%this is used to find the proper amount of Poer sizes by mapping to
%another dense squre like distribusion generated by FFT.
tic
clear all
%close all
%clc
n=120;    % n should be a factor of 4, rpresents X axis
m=36;    %m should be even, represents Y axis
nodes=zeros(m,n);  %in the matrix, m represents y-axis and n does x-axis
actnodes=m*n/2;  %only when n is factor of 4

x_actnode=zeros(actnodes,1);
y_actnode=zeros(actnodes,1);

yx_actnodecon=cell(actnodes,3);

pores_no=n/2*(m-1)+(n/2-1)*fix(m/2);    % n should be even (better to be factor of 4, m also even for this formula
pore_pos=zeros(pores_no,4);
%ver 1.6, to define the type of pore in 3rd colomn
% to define if pores connected to BCs (BC1 or BC2 or ...) in 4th colomn
pore_iter=0;

%make sure this value is equal to what u have in your random generator
%make sure ur pore length, dt and pore radi make sence
porelength=.001;

realX = [repmat([porelength/2 porelength],1,n/2) porelength/2];
node_realX=zeros(actnodes,1);
node_realY=zeros(actnodes,1);

stateoddX=1;
for i=1:n
    if i/2 ~= round(i/2)    %odd x
        for j=1:m/2
            
            if stateoddX==1; k=2*j-1;stateevenX=2;else k=2*j;stateevenX=4;end       %k is actual y-axis position of active node
            actnodeno=j+m/2*(i-1);
            nodes(k,i)=actnodeno;
            x_actnode(actnodeno)=i;
            y_actnode(actnodeno)=k;
            
            %------------real position of nodes -------------
            node_realX(actnodeno)=sum(realX(1:i-1));
            node_realY(actnodeno)=(k-1)*sqrt(3)*porelength/2;
            %------------------------------------------------
            
            yx_actnodecon{actnodeno,1}=[k+1,i+1];
            yx_actnodecon{actnodeno,2}=[k-1,i+1];
            yx_actnodecon{actnodeno,3}=[k,i-1];
        end
        
    else    %even x
        for j=1:m/2
            if stateevenX==2; k=2*j;stateoddX=3;else k=2*j-1;stateoddX=1;end    %k is actual y-axis position of active node
            actnodeno=j+m/2*(i-1);
            nodes(k,i)=actnodeno;
            x_actnode(actnodeno)=i;
            y_actnode(actnodeno)=k;
            
            %------------real position of nodes -------------
            node_realX(actnodeno)=sum(realX(1:i-1));
            node_realY(actnodeno)=(k-1)*sqrt(3)*porelength/2;
            %------------------------------------------------
            
            i2=actnodeno;
            %because all nodes around are Fard nodes, we use the k=2*j-1 to
            %find the actual number of it for
            
            yx_actnodecon{actnodeno,1}=[k-1,i-1];%((---1---))
            
            if y_actnode(actnodeno)~=1
            pore_iter=pore_iter+1;
            pore_pos(pore_iter,2)=i2;            %pore ended node, even X
            if stateevenX==2
                pore_pos(pore_iter,1)=(yx_actnodecon{i2,1}(1)+1)/2+m/2*(yx_actnodecon{i2,1}(2)-1);%j=(k+1)/2 from k=2*j-1
            else
                pore_pos(pore_iter,1)=yx_actnodecon{i2,1}(1)/2+m/2*(yx_actnodecon{i2,1}(2)-1);%j=k/2 from k=2*j
            end
            pore_pos(pore_iter,3)=1;
            end
            
            yx_actnodecon{actnodeno,2}=[k+1,i-1];%((---2---))
            
            if y_actnode(actnodeno)~=m
            pore_iter=pore_iter+1;
            pore_pos(pore_iter,2)=i2;            %pore ended node, even X
            if stateevenX==2
                pore_pos(pore_iter,1)=(yx_actnodecon{i2,2}(1)+1)/2+m/2*(yx_actnodecon{i2,2}(2)-1);%j=(k+1)/2 from k=2*j-1
            else
                pore_pos(pore_iter,1)=yx_actnodecon{i2,2}(1)/2+m/2*(yx_actnodecon{i2,2}(2)-1);%j=k/2 from k=2*j
            end
            pore_pos(pore_iter,3)=2;
            end
            
            yx_actnodecon{actnodeno,3}=[k,i+1];%((---3---))
            
            if x_actnode(actnodeno)~=n
            pore_iter=pore_iter+1;
            pore_pos(pore_iter,2)=i2;            %pore ended node, even X
            if stateevenX==2
                pore_pos(pore_iter,1)=yx_actnodecon{i2,3}(1)/2+m/2*(yx_actnodecon{i2,3}(2)-1);%j=k/2 from k=2*j
            else
                pore_pos(pore_iter,1)=(yx_actnodecon{i2,3}(1)+1)/2+m/2*(yx_actnodecon{i2,3}(2)-1);%j=(k+1)/2 from k=2*j-1
            end
            pore_pos(pore_iter,3)=3;
            end
            
        end
        
    end
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% we can remove "nodes" variable, was for test to see if network works

node_no=actnodeno;


% %%%%%%%%%%%%%pPplotting the network points and pores%%%%%%%%%%%%%%%
% axis([1 n 1 m])
% hold on
% for i=1:node_no
%     x_values=[yx_actnodecon{i,1}(2) x_actnode(i) yx_actnodecon{i,2}(2)...
%         x_actnode(i) yx_actnodecon{i,3}(2)];
%     y_values=[yx_actnodecon{i,1}(1) y_actnode(i) yx_actnodecon{i,2}(1)...
%         y_actnode(i) yx_actnodecon{i,3}(1)];
%     line (x_values,y_values);
% end
% plot(x_actnode,y_actnode,'g+')
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%maybe we can delete yx_actnodecon to free memory and use x_actnode and
%y_actnode and node_pores_nodes instead from now on
clear yx_actnodecon




%0O0btaining the number(id) of pores connected to a specific node.
% V1.3, finding nodes and pores connected to a specific node.
node_pores_nodes=zeros(actnodes, 7);
%V1.6 added, the last colomn for specifying if the node is BC or not.

maxporepernod=0;    %number of allowed pore per node to inc the speed
for inod=1:actnodes
    if (x_actnode(inod)==1) || (x_actnode(inod)==n)
        if (y_actnode(inod)==1) || (y_actnode(inod)==m)
            maxporepernod=1;
        else
            maxporepernod=2;
        end
    else
        if (y_actnode(inod)==1) || (y_actnode(inod)==m)
            maxporepernod=2;
        else
            maxporepernod=3;
        end
    end
    
    %=========== determining if node is BC1 or BC2 or none ======
    if x_actnode(inod)==1
        node_pores_nodes(inod,7)=1;
    elseif x_actnode(inod)==n
        node_pores_nodes(inod,7)=2;
    end
    %============================================================
    
    if rem(x_actnode(inod),2)~=0  %odd x, first column seek, fard kind
        seekcol=1;
        anothercol=2;
        type_node=1;%fard
    else                          %even x, 2nd column seek, zoj kind
        seekcol=2;
        anothercol=1;
        type_node=2;%zoj
    end
    
    i2=0;
    for i=1:pores_no  %here we determine the node kind (fard or zoj) in order to determine the order of its neibours
        if i2==maxporepernod, break; end
        if pore_pos(i,seekcol)==inod
            i2=i2+1;
            node_con=pore_pos(i,anothercol);
            if type_node == 1
                if y_actnode(node_con)<y_actnode(inod)
                    position=1;
                elseif y_actnode(node_con)==y_actnode(inod)
                    position=2;
                elseif y_actnode(node_con)>y_actnode(inod)
                    position=3; 
                end
            else
                if y_actnode(node_con)<y_actnode(inod)
                    position=1;
                elseif y_actnode(node_con)==y_actnode(inod)
                    position=3;
                elseif y_actnode(node_con)>y_actnode(inod)
                    position=2;
                end
            end
            node_pores_nodes(inod,position)=i;
            %cols 1-3 for pores
            node_pores_nodes(inod,position+3)=pore_pos(i,anothercol);
            %cols 4-6 for nodes connected to those pores
            
            %====V1.6, if pores connected to BCs ===========
            if (x_actnode(inod)==n)||(x_actnode(node_con)==n)
                pore_pos(i,4)=2;
            end
            if (x_actnode(inod)==1)||(x_actnode(node_con)==1)
                pore_pos(i,4)=1;
            end
            %===============================================
        end
    end
end


%//////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
%Ver 1.8 to find the real places of nodes (X,Y) based on pore length unit
node_realXY=[node_realX node_realY];
pore_diff_XY=(node_realXY(pore_pos(:,1),:)-node_realXY(pore_pos(:,2),:))/2;
pore_realX=node_realXY(pore_pos(:,2),1)+pore_diff_XY(:,1);
pore_realY=node_realXY(pore_pos(:,2),2)+pore_diff_XY(:,2);
pore_realXY=[pore_realX pore_realY];

% figure;scatter(node_realXY(:,1),node_realXY(:,2),50,'.')
% axis equal
% %axis([0 .09 0 .031])%subject to change indeed
% figure;scatter(pore_realXY(:,1),pore_realXY(:,2),50,'.')
% axis equal
% %axis([0 .09 0 .031])%subject to change indeed
%//////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


%==============================================================
%Finding the SCHEMATIC position of the center of pores for ploting the fluxes in media
xpore=zeros(pores_no,1);
ypore=zeros(pores_no,1);

logx=x_actnode(pore_pos(:,2))-x_actnode(pore_pos(:,1));
xpore(logx==-1)=x_actnode(pore_pos((logx==-1),2))+.5;
xpore(logx==1)=x_actnode(pore_pos((logx==1),1))+.5;
%xpore(logx==0)=x_actnode(pore_pos((logx==0),1));
%for differenet state that hexagonals have a paralel side to X not Y

logy=y_actnode(pore_pos(:,2))-y_actnode(pore_pos(:,1));
ypore(logy==-1)=y_actnode(pore_pos((logy==-1),2))+.5;
ypore(logy==1)=y_actnode(pore_pos((logy==1),1))+.5;
ypore(logy==0)=y_actnode(pore_pos((logy==0),1));

clear logx logy
%==============================================================




%************************* Conductivity,Diameteres *********************************
%Definition of the Conductivity(inverse Resistivity) of pores 

%V1.6 tarif kardane Diameter va mohasebe baghie khavas

for i_file=3:3
file_order=[1,25,5];
radi_file=sprintf('radi_sigma2e-9_lx00%d',file_order(i_file));
load(radi_file,'radi_het','desired_DH')

%----------------------------------------
% %Sensitive analysis part%
%cin_rand=1e-6.*(1.55 + 0.155.*randn(1,10));
% DH_rand=desired_DH(1);desired_DH=DH_rand + DH_rand*0.1.*randn(1,10);
massbac_vec=0.248 + 0.248*0.1.*randn(1,10);
%----------------------------------------

%time step
dt=.05;
tend=60;
time=0;
time_iter=0;
time_save=20; %20%dtXtime_save=1 manish ine ke ma har sanie ro save mikonim


%=============== Very Important ===============
NoofRealiz=5;
Conc_Profiles=zeros(NoofRealiz,4,pores_no,tend/(dt*time_save));
%  for number of realizations
%  number of species
% pores_no, number of pores
% number of Times that we have saved data for them, here every second

Rate_Profiles=zeros(NoofRealiz,4,pores_no,tend/(dt*time_save));
%==============================================

for i_radi=1:1%NoofRealiz %number of realization
radi=radi_het(:,i_radi);

deltaH=desired_DH(1);%deltaH=desired_DH(i_radi);%for Sensitive analysis

mio_water=8.94e-4;
Cond=pi.*radi.^4./(8*mio_water*porelength);
vol=pi.*radi.^2.*porelength;
pore_CS=pi.*radi.^2;%pore cross section

%baraye didane chegoonegie neveshtane anvae mokhtalefe Res va Con, be
%version haye ghabli V1.5 moraje'e shavad
%*************************** Conductivity,Diameteres (/end)**************************




%----------------- "Changed BCs" diagonals of Sparse matrix construction ---------------------
nodes_notBC=node_no-m; %only for even m

downdiag=zeros(nodes_notBC,1);
downl=downdiag;
downr=downdiag;

updiag=downdiag;
upr=updiag;
upl=updiag;

bvector=zeros(nodes_notBC,1);
maindiag=zeros(nodes_notBC,1);

iup=m;
idown=0;
idiag=0;

for inod=m/2+1:node_no-m/2
    iup=iup+1;
    idown=idown+1;
    idiag=idiag+1;
    if rem(x_actnode(inod),2)==0 %zoj node
       updiag(idiag)=-Cond(node_pores_nodes(inod,3));
%        updiag(idiag)=node_pores_nodes(inod,3+3);%to check if its right node
       
       if idown==node_pores_nodes(inod,4)
           downdiag(idiag)=-Cond(node_pores_nodes(inod,1));
           if node_pores_nodes(inod,2)~=0,downr(idiag)=-Cond(node_pores_nodes(inod,2));end
%            downr(idiag)=node_pores_nodes(inod,2+3);%to check if its right node
%            downdiag(idiag)=node_pores_nodes(inod,1+3);
       else
           downdiag(idiag)=-Cond(node_pores_nodes(inod,2));
           if node_pores_nodes(inod,1)~=0,downl(idiag)=-Cond(node_pores_nodes(inod,1));end
%            downl(idiag)=node_pores_nodes(inod,1+3);%to check if its right node
%            downdiag(idiag)=node_pores_nodes(inod,2+3);
       end
       
    else    %fard node
       downdiag(idiag)=-Cond(node_pores_nodes(inod,2));
%        downdiag(idiag)=node_pores_nodes(inod,2+3);%to check if its right node
       
       if iup==node_pores_nodes(inod,4)
           updiag(idiag)=-Cond(node_pores_nodes(inod,1));
           if node_pores_nodes(inod,3)~=0,upr(idiag)=-Cond(node_pores_nodes(inod,3));end
%            upr(idiag)=node_pores_nodes(inod,3+3);%to check if its right node
%            updiag(idiag)=node_pores_nodes(inod,1+3);
       else
           updiag(idiag)=-Cond(node_pores_nodes(inod,3));
           if node_pores_nodes(inod,1)~=0,upl(idiag)=-Cond(node_pores_nodes(inod,1));end
%            upl(idiag)=node_pores_nodes(inod,1+3);%to check if its right node
%            updiag(idiag)=node_pores_nodes(inod,3+3);
       end
    end
    
end


%BC: the head pressure values in starting and ending nodes
%each applied to the first n/2 and last n/2 nodes in the structure
head_begin=deltaH;%62.15 for 160mic%248.6 for 80mic;%deltaH(i_radi);
head_end=0;

%downl is always zero for bv_begin and so is upl for bv_end, so we removed them in next lines but keeping the original command
% bv_end=[upl(end-m/2+1:end),updiag(end-m/2+1:end),upr(end-m/2+1:end)];
% bv_begin=[downl(1:m/2),downdiag(1:m/2),downr(1:m/2)];

bv_end=[updiag(end-m/2+1:end),upr(end-m/2+1:end)];
bv_begin=[downdiag(1:m/2),downr(1:m/2)];
for inod=1:m/2
    bvb_nozero=bv_begin(inod,:);
    bvn_nozero=bv_end(end-inod+1,:);
%     bvb_nozero(bvb_nozero==0)=[];
%     bvn_nozero(bvn_nozero==0)=[];
    
%minus sign (-) because that Bvector is in the other side of the equation
    bvector(inod)=-sum(bvb_nozero)*head_begin;
    bvector(end-inod+1)=-sum(bvn_nozero)*head_end;
end


indmaindiag=node_pores_nodes(m/2+1:end-m/2,[1 2 3]);
for inod=1:nodes_notBC
    none_zero_pores=indmaindiag(inod,:);
    none_zero_pores(none_zero_pores==0)=[];
    maindiag(inod,1)=sum(Cond(none_zero_pores));
end


Amat3=spdiags([upr updiag upl maindiag downr downdiag downl], [-(m/2+1) -m/2 -(m/2-1) 0 m/2-1 m/2 m/2+1], nodes_notBC, nodes_notBC);
%Amat=spdiags([downl downdiag downr maindiag upl updiag upr], [-(m/2+1) -m/2 -(m/2-1) 0 m/2-1 m/2 m/2+1], nodes_notBC, nodes_notBC);
head_calc = Amat3\bvector;


%---------------------------Matrix solved (/end)--------------------------------------





%-------------------------- Head values over medium & Fluxes -----------------------
head_BC1=repmat(head_begin,m/2,1);
head_BC2=repmat(head_end,m/2,1);
head = [head_BC1;head_calc;head_BC2];

%flowartes inside the pores, predefind flow directions from pores_pos
%from fard to zoj
flux=-Cond.*(head(pore_pos(:,2))-head(pore_pos(:,1)));
%----------------------------plots---------------------------------------

%figure;scatter(node_realX,node_realY,50,head,'.');
%figure;scatter(pore_realX,pore_realY,50,flux,'.');

%plotting heads over the domain
% z = reshape(head, m/2, length(head)/(m/2));
% y = reshape(y_actnode, m/2, length(y_actnode)/(m/2));
% x = reshape(x_actnode, m/2, length(x_actnode)/(m/2));
% 
% figure;surf(x,y,z) %heads
% contour(x,y,z);%heads in nodes

%figure;plot3k_lable({xpore ypore abs(flux)},[],[],{},6);% fluxes in pores

%figure;plot3k_lable({xpore ypore Cond},[],[],{},6);% Conductivity of pores

%--------------------------------------------------------------------
%-------------------------- Heads & Fluxes (/end)-----------------------












%----------------------V 1.6.1 -----------------------------------
% Advection, Martin Explicite
% we consider only pores that feed the specific pore

%*********** NOTE for change of BC ***************
%after changing the boundary condition and flow from Left to Right, we
%don't encounter the parallel pores across the fluid flow. so some parts
%like pore_adv removed...



%Initial Concentration
conc_init=zeros(pores_no,1);

dconc1_bc1_dt=-.1;%BC changing by time


%Boundry conditions
%for 4 species
conc1_bc1=1.55e-6;%cin_rand(i_radi);% For Sensitive analysis %1st spee
conc2_bc1=1.55e-6;%cin_rand(i_radi);
conc3_bc1=1.55e-6;%cin_rand(i_radi);
conc4_bc1=1.55e-6;%cin_rand(i_radi);

%concentraion profiles for plotting
conc1_profile=zeros(pores_no,tend/dt/time_save);%1st spee
conc2_profile=zeros(pores_no,tend/dt/time_save);
conc3_profile=zeros(pores_no,tend/dt/time_save);
conc4_profile=zeros(pores_no,tend/dt/time_save);

%+++++++++++++++++++Advection params+++++++++++++++

flux_adv_abs=abs(flux);
%++++++++++++++++++++++++++++++++++++++++++++++++++

%+++++++++++++++++++Diffusion params+++++++++++
% %for BC Diffusion (from 1 side to other side)
% nod_bc2=find(node_pores_nodes(:,7)==2);
nod_bc1=find(node_pores_nodes(:,7)==1);

%singular variable only for Diffusion
conc1_last=conc_init;%1st spee
conc2_last=conc_init;
conc3_last=conc_init;
conc4_last=conc_init;

%saveiter_conc_prof=1;
%conc_diff_profile=zeros(pores_no,tend/dt/saveiter_conc_prof);

C1node=zeros(node_no,1);%1st spee
C2node=zeros(node_no,1);
C3node=zeros(node_no,1);
C4node=zeros(node_no,1);

Diff1_flux=zeros(pores_no,2);%1st spee
Diff2_flux=zeros(pores_no,2);
Diff3_flux=zeros(pores_no,2);
Diff4_flux=zeros(pores_no,2);

diff1_coff=6e-10;%1st spee
diff2_coff=6e-10;
diff3_coff=6e-10;
diff4_coff=6e-10;
%++++++++++++++++++++++++++++++++++++++++++++++


%++++++++++++++++++BRNS variables+++++++++++++++++

rr1=zeros(pores_no,1);%1st spee
rr2=zeros(pores_no,1);
rr3=zeros(pores_no,1);

%rate return profiles for plotting
rr1_profile=zeros(pores_no,tend/dt/time_save);%1st spee
rr2_profile=zeros(pores_no,tend/dt/time_save);
rr3_profile=zeros(pores_no,tend/dt/time_save);
rr4_profile=zeros(pores_no,tend/dt/time_save);

%----  BRNS file fixed params in dll file ----
Av_pore=2*2./radi; %increase artificialy the Av of 160mic pore network by 2 to make it equal to Av from exp
% this Av should be similar and somehow equal for hetrogenous networks of normally distributed values of radi
Km=231e-9; %Mole
mumax=.326e-9; %mole/mgBac/sec
Diff_BRNS=6e-10; %equal to diffusivity coffs of spicies
massbac=0.248;%massbac_vec(i_radi);%for Sensitive analysis %mg
surfexp=606.6e-4; %m^2
volexp=2.45e-6; %m^3
Avexp=surfexp/volexp;
robacexp=massbac/surfexp; %mg/m^2


Area_tot=2*pi*sum(radi)*porelength;
Vol_tot=sum(vol);
Av_model=2*Area_tot/Vol_tot;% x2 for rough microbe surface
% To make a new bac density for hetrogenos medium in order to have similar conditions to homogenous case
robac=robacexp*Avexp/Av_model;

qmax=Av_pore.*mumax.*robac./1000; %Mole/sec

thiele=(qmax.*radi)./(Diff_BRNS*Km.*Av_pore);
Veff=1+(.42./(exp((-log(thiele)+log(.02))/.95)*100+1));
%Effective velocity results from reaction in a single pores
flux_adv_abs_eff=Veff.*flux_adv_abs;
%-----------------------------------------------

%4pee
fixedConcentrationBoundary=[0 0 0 0]; % must have entry for every species!

waterSaturation=0;
porosity=0;
pos_x=0;
posx_ptr=libpointer('doublePtr', pos_x);
pos_y=0;
posy_ptr=libpointer('doublePtr', pos_y);
pos_z=0;
posz_ptr=libpointer('doublePtr', pos_z);

fcb_ptr=libpointer('int32Ptr', fixedConcentrationBoundary);
p_ptr=libpointer('doublePtr', porosity);
ws_ptr=libpointer('doublePtr', waterSaturation);
returnValue=0;%-1;
rv_ptr=libpointer('int32Ptr', returnValue);

%4spee
numberOfSpecies=4;%number of spee!!!
nos_ptr=libpointer('int32Ptr', numberOfSpecies);

timeStep=dt;%for now we take same timestep from advection for reaction
ts_ptr=libpointer('doublePtr', timeStep);
%************************************************************************************************
% library_file='returnRates_InhibA3';
% [notfound,warnings]=loadlibrary(strcat(library_file,'.dll'), 'brnsdllRateReturn.h');
%++++++++++++++++++++++++++++++++++++++++++++++



while time<tend
    
    %---------------Advection-----------------------------------------
    Cin1=zeros(pores_no,1);%inlet pore network concentration for 1st spee
    Cin2=zeros(pores_no,1);
    Cin3=zeros(pores_no,1);
    Cin4=zeros(pores_no,1);
    
%     conc1_last=conc1_last_diff(1:poreadv_no);
%     conc2_last=conc2_last_diff(1:poreadv_no);
    
    for pore_iter=1:pores_no
        %ma midanim ke nodehaye zoj shomare2 va fard shomare1 hastand
        node_fard=pore_pos(pore_iter,1);
        node_zoj=pore_pos(pore_iter,2);

        if pore_pos(pore_iter,4)~=1
            if sign(flux(pore_iter))==1
                Cin_all=node_pores_nodes(node_fard, [1,2,3]);
                acceptedflux=-1;
                Cin_all(Cin_all==0)=[];
                Cin_all(Cin_all==pore_iter)=[];
                Cin_all(sign(flux(Cin_all))==-acceptedflux)=[];
                Cin1(pore_iter)=sum(conc1_last(Cin_all).*flux_adv_abs_eff(Cin_all))/sum(flux_adv_abs_eff(Cin_all));%1st spee
                Cin2(pore_iter)=sum(conc2_last(Cin_all).*flux_adv_abs(Cin_all))/sum(flux_adv_abs(Cin_all));%2nd spee
                Cin3(pore_iter)=sum(conc3_last(Cin_all).*flux_adv_abs(Cin_all))/sum(flux_adv_abs(Cin_all));%3rd spee
                Cin4(pore_iter)=sum(conc4_last(Cin_all).*flux_adv_abs(Cin_all))/sum(flux_adv_abs(Cin_all));%4th spee
            elseif sign(flux(pore_iter))==-1
                Cin_all=node_pores_nodes(node_zoj, [1,2,3]);
                acceptedflux=1;
                Cin_all(Cin_all==0)=[];
                Cin_all(Cin_all==pore_iter)=[];
                Cin_all(sign(flux(Cin_all))==-acceptedflux)=[];
                Cin1(pore_iter)=sum(conc1_last(Cin_all).*flux_adv_abs_eff(Cin_all))/sum(flux_adv_abs_eff(Cin_all));%1st spee
                Cin2(pore_iter)=sum(conc2_last(Cin_all).*flux_adv_abs(Cin_all))/sum(flux_adv_abs(Cin_all));%2nd spee
                Cin3(pore_iter)=sum(conc3_last(Cin_all).*flux_adv_abs(Cin_all))/sum(flux_adv_abs(Cin_all));%3rd spee
                Cin4(pore_iter)=sum(conc4_last(Cin_all).*flux_adv_abs(Cin_all))/sum(flux_adv_abs(Cin_all));%4th spee
            else %vaghty hich jaryani az pore oboor nemikone
                Cin1(pore_iter)=0;%1st spee
                Cin2(pore_iter)=0;
                Cin3(pore_iter)=0;
                Cin4(pore_iter)=0;
            end
        else
            Cin1(pore_iter)=conc1_bc1;%1st spee
            Cin2(pore_iter)=conc2_bc1;
            Cin3(pore_iter)=conc3_bc1;
            Cin4(pore_iter)=conc4_bc1;
        end
    end
    
    %%--------pulse BC Advective--------
    %if time>8;conc_bc1=0;end
    
    %advedtive species
%     when there is only advective fluid(no diffusion)
%     conc1=dt.*flux_adv_abs./vol.*(Cin1-conc1_last)+conc1_last;%1st spee
%     conc2=dt.*flux_adv_abs./vol.*(Cin2-conc2_last)+conc2_last;
    
    conc1_adv=dt.*flux_adv_abs_eff./vol.*(Cin1-conc1_last);%1st spee
    conc2_adv=dt.*flux_adv_abs./vol.*(Cin2-conc2_last);
    conc3_adv=dt.*flux_adv_abs./vol.*(Cin3-conc3_last);
    conc4_adv=dt.*flux_adv_abs./vol.*(Cin4-conc4_last);
    
    
    %-------------------------Advection (/end)---------------------------------
    
    
    
    %----------------------Diffusion--------------------
	for node_iter=1:node_no
        
        connect_pores=node_pores_nodes(node_iter,[1,2,3]);
        connect_pores(connect_pores<=0)=[];
        
        C1node(node_iter)=sum(conc1_last(connect_pores).*pore_CS(connect_pores))/sum(pore_CS(connect_pores));%1st spee
        C2node(node_iter)=sum(conc2_last(connect_pores).*pore_CS(connect_pores))/sum(pore_CS(connect_pores));
        C3node(node_iter)=sum(conc3_last(connect_pores).*pore_CS(connect_pores))/sum(pore_CS(connect_pores));
        C4node(node_iter)=sum(conc4_last(connect_pores).*pore_CS(connect_pores))/sum(pore_CS(connect_pores));
    end
    
%   %BC diffusion (this can be written more efficient)
    C1node(nod_bc1)=conc1_bc1;%constant feed %1st spee
    C2node(nod_bc1)=conc2_bc1;
    C3node(nod_bc1)=conc3_bc1;
    C4node(nod_bc1)=conc4_bc1;
%   Cnode(nod_bc2)=0;
    %--------pulse BC Diffusive--------
    %if time>8;Cnode(nod_bc1)=0;end
    
    %----- %1st spee -----------------
    Diff1_flux(:,1)=-diff1_coff.*(conc1_last-C1node(pore_pos(:,1)))/(porelength/2);%1st spee
    Diff1_flux(:,2)=-diff1_coff.*(conc1_last-C1node(pore_pos(:,2)))/(porelength/2);
    
    conc1_diff=dt*(Diff1_flux(:,1)+Diff1_flux(:,2))/porelength;
	%----- %2nd spee -----------------
    Diff2_flux(:,1)=-diff2_coff.*(conc2_last-C2node(pore_pos(:,1)))/(porelength/2);
    Diff2_flux(:,2)=-diff2_coff.*(conc2_last-C2node(pore_pos(:,2)))/(porelength/2);
    
    conc2_diff=dt*(Diff2_flux(:,1)+Diff2_flux(:,2))/porelength;
    %----- %3rd spee -----------------
    Diff3_flux(:,1)=-diff3_coff.*(conc3_last-C3node(pore_pos(:,1)))/(porelength/2);
    Diff3_flux(:,2)=-diff3_coff.*(conc3_last-C3node(pore_pos(:,2)))/(porelength/2);
    
    conc3_diff=dt*(Diff3_flux(:,1)+Diff3_flux(:,2))/porelength;
    %----- %4th spee -----------------
    Diff4_flux(:,1)=-diff4_coff.*(conc4_last-C4node(pore_pos(:,1)))/(porelength/2);
    Diff4_flux(:,2)=-diff4_coff.*(conc4_last-C4node(pore_pos(:,2)))/(porelength/2);
    
    conc4_diff=dt*(Diff4_flux(:,1)+Diff4_flux(:,2))/porelength;
    
	%---------------------Diffusion (/end)----------------
    
    
    conc1=conc1_last+conc1_adv+conc1_diff;%1st spee
    conc2=conc2_last+conc2_adv+conc2_diff;
    conc3=conc3_last+conc3_adv+conc3_diff;
    conc4=conc4_last+conc4_adv+conc4_diff;
    
    
%------------------------- REACTION BRNS 1.8 --------------------------------
%     for pore_iter=1:pores_no
%         ConcAfterTransport=[conc1(pore_iter) conc2(pore_iter) conc3(pore_iter) conc4(pore_iter)];%4spee
%         ConcBeforeTransport=ConcAfterTransport;%used as initial guess for newton iteration
%         OutputConcentrations =[0.0 0.0 0.0 0.0];%4spee
%         RateReturnVector=[0.0 0.0 0.0];%4spee with tracer
% 
%         cat_ptr=libpointer('doublePtr', ConcAfterTransport);
%         cbt_ptr=libpointer('doublePtr', ConcBeforeTransport);
%         oc_ptr=libpointer('doublePtr', OutputConcentrations);
%         rrv_ptr=libpointer('doublePtr', RateReturnVector);
% 
%         %radi dependency of reaction, R Best
%         %variant robac for every realization
%         par_ptr=libpointer('doublePtr', [radi(pore_iter) robac 1.5*Km]);
%         
%         % Calling BRNS
%         calllib(library_file,'invokebrns',cat_ptr, cbt_ptr, oc_ptr, nos_ptr, ts_ptr,...
%             fcb_ptr, rv_ptr, posx_ptr, posy_ptr, posz_ptr, p_ptr, ws_ptr, par_ptr,rrv_ptr)
% 
%         % Retrieving Data
%         returnValue=get(rv_ptr, 'Value');
%         if returnValue~=0, [returnValue pore_iter],end
%         % CHECK returnValue:
%         % 0: Computation ok
%         % 1: Negative concentrations occured
%         % 2: Exceeding maximum newton iteration
%         % 3: 1 and 2
% 
%         OutputConcentrations=get(oc_ptr, 'Value');
%         conc1(pore_iter)=OutputConcentrations(1);
%         conc2(pore_iter)=OutputConcentrations(2);
%         conc3(pore_iter)=OutputConcentrations(3);
%         conc4(pore_iter)=OutputConcentrations(4);
%         
%         RateReturnVector=get(rrv_ptr, 'Value');
%         rr1(pore_iter)=RateReturnVector(1);
%         rr2(pore_iter)=RateReturnVector(2);
%         rr3(pore_iter)=RateReturnVector(3);
%         
%     end

%------------------------- BRNS ends ------------------------------------


    time=time+dt;
    time_iter=1+time_iter;
    
    if mod(time_iter,time_save)==0
    conc1_profile(:,time_iter/time_save)=conc1;%1st spee
    conc2_profile(:,time_iter/time_save)=conc2;
    conc3_profile(:,time_iter/time_save)=conc3;
    conc4_profile(:,time_iter/time_save)=conc4;
    
    rr1_profile(:,time_iter/time_save)=rr1;%1st spee
    rr2_profile(:,time_iter/time_save)=rr2;
    rr3_profile(:,time_iter/time_save)=rr3;
    end
    %if mod(time_iter,5)==0;conc1_profile(:,time_iter)=conc1;end

%     conc1_last=conc1;
%     conc2_last=conc2;

    conc1_last=conc1;%1st spee
    conc2_last=conc2;
    conc3_last=conc3;
    conc4_last=conc4;
    
end

% unloadlibrary(library_file)%close BRNS library before end

%----------------------------V1,6 Exp Advection-----------------------------


Conc_Profiles(i_radi,1,:,:)=conc1_profile;%1st spee
Conc_Profiles(i_radi,2,:,:)=conc2_profile;
Conc_Profiles(i_radi,3,:,:)=conc3_profile;
Conc_Profiles(i_radi,4,:,:)=conc4_profile;

Rate_Profiles(i_radi,1,:,:)=rr1_profile;%1st spee
Rate_Profiles(i_radi,2,:,:)=rr2_profile;
Rate_Profiles(i_radi,3,:,:)=rr3_profile;

end
%save(sprintf('hetro_2e-9_lx005_radi%d',i_radi),'conc1_profile','conc2_profile','flux','tend','dt')
%save(radi_file,'Conc_Profiles','-append')
end
%save sensivitymbac
timespent=toc
%figure;plot3k_lable({xpore ypore conc2_profile(:,10)},[],[],{},6);

figure;
scatter(pore_realXY(:,1), pore_realXY(:,2), 50, conc1, '.');
axis equal;

figure;
scatter(pore_realXY(:,1), pore_realXY(:,2), 50, conc2, '.');
axis equal;

figure;
scatter(pore_realXY(:,1), pore_realXY(:,2), 50, conc3, '.');
axis equal;

figure;
scatter(pore_realXY(:,1), pore_realXY(:,2), 50, conc4, '.');
axis equal;
    
    
